import { browser } from '@wdio/globals';
import { NOT_KNOWN } from './constants.js';
export class Metadata {
    determineMetadata(data) {
        let instanceData;
        const currentCapabilities = data.capabilities;
        const optsCaps = browser.options.capabilities;
        const currentConfigCapabilities = data?.capabilities;
        const w3cCaps = (data.config.capabilities)
            ? Object.prototype.hasOwnProperty.call(data.config.capabilities, 'cjson:metadata')
                ? data.config.capabilities['cjson:metadata']
                : browser.options?.requestedCapabilities?.cjson_metadata
            : {};
        const metadata = currentConfigCapabilities?.cjson_metadata
            || w3cCaps
            || optsCaps?.cjson_metadata
            || {};
        if (currentConfigCapabilities?.app || metadata?.app) {
            instanceData = this.determineAppData(currentConfigCapabilities, metadata);
        }
        else {
            instanceData = this.determineBrowserData(currentCapabilities, currentConfigCapabilities, metadata);
        }
        return {
            ...instanceData,
            device: this.determineDeviceName(metadata, currentConfigCapabilities),
            platform: {
                name: this.determinePlatformName(metadata, currentCapabilities),
                version: this.determinePlatformVersion(metadata, currentCapabilities),
            },
        };
    }
    determineDeviceName(metadata, currentConfigCapabilities) {
        return (metadata?.device || currentConfigCapabilities?.deviceName || `Device name ${NOT_KNOWN}`);
    }
    determinePlatformName(metadata, currentCapabilities) {
        const currentPlatformName = currentCapabilities?.platformName
            ? currentCapabilities?.platformName.includes('mac')
                ? 'osx'
                : currentCapabilities.platformName.includes('windows')
                    ? 'windows'
                    : currentCapabilities?.platformName
            : `Platform name ${NOT_KNOWN}`;
        return (metadata.platform && metadata?.platform?.name)
            ? metadata.platform?.name
            : currentPlatformName;
    }
    determinePlatformVersion(metadata, currentCapabilities) {
        if (metadata && metadata.platform && metadata.platform?.version) {
            return metadata.platform.version;
        }
        if (currentCapabilities?.['appium:platformVersion']) {
            return currentCapabilities?.['appium:platformVersion'];
        }
        return `Version ${NOT_KNOWN}`;
    }
    determineAppData(currentConfigCapabilities, metadata) {
        const metaAppName = (metadata?.app && metadata.app?.name) ? metadata?.app?.name : 'No metadata.app.name available';
        const metaAppVersion = (metadata?.app && metadata.app.version) ? metadata.app.version : 'No metadata.app.version available';
        const appPath = currentConfigCapabilities.app || metaAppName;
        const appName = appPath.substring(appPath.replace('\\', '/').lastIndexOf('/')).replace('/', '');
        return {
            app: {
                name: appName,
                version: metaAppVersion,
            },
        };
    }
    determineBrowserData(currentCapabilities, currentConfigCapabilities, metadata) {
        const browserName = currentCapabilities?.browserName
            || currentConfigCapabilities?.browserName
            || ((metadata && metadata?.browser && metadata.browser?.name) ? metadata?.browser?.name : 'No metadata.browser.name available');
        const browserVersion = currentCapabilities?.version
            || currentCapabilities?.browserVersion
            || currentConfigCapabilities?.browserVersion
            || ((metadata && metadata?.browser && metadata?.browser?.version) ? metadata?.browser?.version : 'No metadata.browser.version available');
        return {
            browser: {
                name: browserName,
                version: browserVersion,
            }
        };
    }
}
//# sourceMappingURL=metadata.js.map