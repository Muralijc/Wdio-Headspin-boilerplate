{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs-extra'\nimport path from 'node:path'\n\nimport WDIOReporter, { HookStats, RunnerStats, SuiteStats, TestStats } from '@wdio/reporter'\nimport logger from '@wdio/logger'\n\nimport {\n    AFTER,\n    BEFORE,\n    DEFAULT_JSON_FOLDER,\n    DEFAULT_LANGUAGE,\n    DEFAULT_REPORT_FILE_PER_RETRY,\n    FEATURE,\n    PASSED,\n    //   PENDING,\n    SCENARIO,\n    TEXT_PLAIN,\n} from './constants.js'\nimport { Metadata } from './metadata.js'\nimport { containsSteps, keywordStartsWith, getFailedMessage } from './utils.js'\nimport type { CucumberJsJsonReporterInterface, AttachmentType, CucumberAttachmentData, CucumberJsAttachment, Feature, MetadataObject, Report, Scenario, Step } from './types.js'\nimport type { HookStatsExtended, SuiteStatsExtended, TestStatsExtended } from './types/wdio.js'\n\nconst log = logger('wdio-cucumberjs-json-reporter')\n\nexport class CucumberJsJsonReporter extends WDIOReporter {\n    public instanceMetadata: MetadataObject\n    public report: Report\n    public metadataClassObject: Metadata\n\n    public constructor(public options: CucumberJsJsonReporterInterface) {\n        super(options)\n        this.options = options\n\n        if (!this.options.jsonFolder) {\n            this.options.jsonFolder = DEFAULT_JSON_FOLDER\n            log.info(`The 'jsonFolder' was not set, it has been set to the default '${DEFAULT_JSON_FOLDER}'`)\n        }\n        if (!this.options.language) {\n            this.options.language = DEFAULT_LANGUAGE\n            log.info(`The 'language' was not set, it has been set to the default '${DEFAULT_LANGUAGE}'`)\n        }\n        if (this.options.reportFilePerRetry === undefined) {\n            this.options.reportFilePerRetry = DEFAULT_REPORT_FILE_PER_RETRY\n            log.info(\n                `The 'reportFilePerRetry' was not set, it has been set to the default '${DEFAULT_REPORT_FILE_PER_RETRY.toString()}'`,\n            )\n        }\n\n        this.instanceMetadata = null\n        this.report = <Report>{}\n\n        this.registerListeners()\n        this.metadataClassObject = new Metadata()\n    }\n\n    /**\n     * Attach data to the report\n     */\n    public static attach(data: CucumberAttachmentData, type: AttachmentType = TEXT_PLAIN): void {\n        // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-unsafe-assignment\n        (process.emit as Function)('wdioCucumberJsReporter:attachment', { data, type })\n    }\n\n    /**\n     * Add a customer listener for the attachments\n     */\n    public registerListeners(): void {\n        process.on('wdioCucumberJsReporter:attachment', this.cucumberJsAttachment.bind(this))\n    }\n\n    /**\n     * The order of running of the `on*` is the following:\n     * - onRunnerStart\n     * - onSuiteStart (feature)\n     * - onSuiteStart (scenario)\n     * - onHookStart\n     * - onHookEnd\n     * - onTestStart\n     * - onBeforeCommand\n     * - onAfterCommand\n     * - onTestPass\n     * - onHookStart\n     * - onHookEnd\n     * - onSuiteEnd (scenario is done)\n     * - onSuiteEnd (feature is done)\n     * - onRunnerEnd\n     */\n\n    /**\n     * This hook is used to retrieve the browser data, but this is done only once\n     */\n    public onRunnerStart(runnerData: RunnerStats): void {\n        if (!this.instanceMetadata) {\n            this.instanceMetadata = this.metadataClassObject.determineMetadata(runnerData)\n        }\n    }\n\n    /**\n     * This hook is called twice:\n     * 1. create the feature\n     * 2. add the scenario to the feature\n     */\n    public onSuiteStart(payload: SuiteStats): void {\n        if (!this.report.feature) {\n            this.report.feature = this.getFeatureDataObject(payload)\n        }\n\n        /* istanbul ignore else */\n        if (!this.report.feature.metadata) {\n            this.report.feature = { ...this.report.feature, metadata: { ...this.instanceMetadata } }\n        }\n\n        if (typeof this.report.feature.elements !== 'undefined' && payload.parent) {\n            this.report.feature.elements.push(this.getScenarioDataObject(payload, this.report.feature.id))\n        }\n    }\n\n    /**\n     * This one is for the start of the hook and determines if this is a pending `before` or `after` hook.\n     * The data will be equal to a step, so a hook is added as a step.\n     */\n    public onHookStart(payload: HookStatsExtended): void {\n        // There is always a scenario, take the last one\n        if (this.options.disableHooks) {\n            return\n        }\n        const currentSteps = this.getCurrentScenario().steps\n        payload.state = PASSED\n        payload.keyword = containsSteps(currentSteps, this.options.language) ? AFTER : BEFORE\n\n        this.addStepData(payload)\n    }\n\n    /**\n     * This one is for the end of the hook, it directly comes after the onHookStart\n     * A hook is the same  as a 'normal' step, so use the update step\n     */\n    public onHookEnd(payload: HookStats): void {\n        if (this.options.disableHooks) {\n            return\n        }\n        payload.state = payload.error ? payload.state : PASSED\n\n        return this.updateStepStatus(payload)\n    }\n\n    /**\n     * This one starts the step, which will be set to pending\n     */\n    public onTestStart(payload: TestStats): void {\n        this.addStepData(payload)\n    }\n\n    // /**\n    //  * This one starts a command\n    //  *\n    //  * @param payload\n    //  */\n    // onBeforeCommand(payload) {\n    //     // console.log('\\nconst onBeforeCommand= ', JSON.stringify(payload), '\\n')\n    // }\n\n    // /**\n    //  * This is the result of the command\n    //  *\n    //  * @param payload\n    //  */\n    // onAfterCommand(payload) {\n    //     // console.log('\\nconst onAfterCommand= ', JSON.stringify(payload), '\\n')\n    // }\n\n    // onScreenshot(payload) {\n    //     // console.log('\\nconst onScreenshot= ', JSON.stringify(payload), '\\n')\n    // }\n\n    /**\n     * The passed step\n     */\n    public onTestPass(payload: TestStats): void {\n        this.updateStepStatus(payload)\n    }\n\n    /**\n     * The failed step including the logs\n     */\n    public onTestFail(payload: TestStats): void {\n        this.updateStepStatus(payload)\n    }\n\n    /**\n     * The skippe step\n     */\n    public onTestSkip(payload: TestStats): void {\n        this.updateStepStatus(payload)\n    }\n\n    // onTestEnd(payload) {\n    //     console.log('\\nonTestEnd')\n    // }\n\n    // /**\n    //  * Executed twice:\n    //  * - at the end of a scenario\n    //  * - at the end of all scenario's\n    //  *\n    //  * @param payload\n    //  */\n    // onSuiteEnd(payload) {}\n\n    /**\n     * Runner is done, write the file\n     */\n    public onRunnerEnd(): void {\n        if (!this.report.feature) {\n            return\n        }\n        const uniqueId = String(Date.now() + Math.random()).replace('.', '')\n        const filename = this.options.reportFilePerRetry\n            ? `${this.report.feature.id}_${uniqueId}.json`\n            : `${this.report.feature.id}.json`\n        const jsonFolder = path.resolve(process.cwd(), this.options.jsonFolder)\n        const jsonFile = path.resolve(jsonFolder, filename)\n        const json = [this.report.feature]\n        // Check if there is an existing file, if so concat the data, else add the new\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const output = fs.existsSync(jsonFile) ? json.concat(fs.readJsonSync(jsonFile)) : json\n\n        fs.outputJsonSync(jsonFile, output)\n    }\n\n    /**\n     * All functions\n     */\n\n    /**\n     * Get the feature data object\n     */\n    public getFeatureDataObject(featureData: SuiteStats): Feature {\n        const featureName = featureData.title\n\n        return {\n            keyword: FEATURE,\n            type: featureData.type,\n            description: featureData.description || '',\n            // Sample  `uid: 'sample.feature:2:1'`, where:\n            // - [0]: file name\n            // - [1]: line in file\n            // - [2]: column\n            line: featureData.uid && featureData.uid.includes(':') ? parseInt(featureData.uid.split(':')[1], 10) : null,\n            name: featureName,\n            uri: featureData.file || 'Can not be determined',\n            tags: featureData.tags || [],\n            elements: [],\n            id: featureName.replace(/[\\\\/?%*:|\"<> ]/g, '-').toLowerCase(),\n        }\n    }\n\n    /**\n     * Get the scenario data object\n     */\n    public getScenarioDataObject(\n        scenarioData: TestStatsExtended | SuiteStatsExtended | HookStatsExtended,\n        id: string,\n    ): Scenario {\n        const scenarioName = scenarioData.title\n\n        return {\n            keyword: SCENARIO,\n            type: scenarioData.type,\n            description: scenarioData.description || '',\n            name: scenarioName,\n            tags: scenarioData.tags || [],\n            id: `${id}${scenarioData.title.replace(/ /g, '-').toLowerCase()}`,\n            steps: [],\n        }\n    }\n\n    /**\n     * Get the step data object\n     */\n    public getStepDataObject(stepData: TestStatsExtended | HookStatsExtended): Step {\n        const keyword =\n            stepData?.keyword || keywordStartsWith(stepData.title, this.options.language) || ''\n        const title = (stepData.title.split(keyword).pop() || stepData.title || '').trim()\n        return {\n            arguments: stepData.argument ? [stepData.argument] : [],\n            keyword,\n            name: title,\n            result: {\n                status: stepData.state || '',\n                duration: (stepData._duration || 0) * 1000000,\n                ...getFailedMessage(stepData),\n            },\n            line: null,\n            match: {\n                location: 'can not be determined with webdriver.io',\n            },\n        }\n    }\n\n    /**\n     * Get the current scenario\n     */\n    public getCurrentScenario(): Scenario {\n        return this.report.feature.elements[this.report.feature.elements.length - 1]\n    }\n\n    /**\n     * Get the current step\n     */\n    public getCurrentStep(): Step {\n        const currentScenario = this.getCurrentScenario()\n\n        return currentScenario.steps[currentScenario.steps.length - 1]\n    }\n\n    /**\n     * Add step data to the current running scenario\n     */\n    public addStepData(test: TestStats | HookStats): void {\n        // Always add the finished step to the end of the steps\n        // of the last current scenario that is running\n        this.getCurrentScenario().steps.push(this.getStepDataObject(test))\n    }\n\n    /**\n     * Add step data to the current running scenario\n     */\n    public updateStepStatus(test: TestStats | HookStats): void {\n        // There is always a scenario, take the last one\n        const currentSteps = this.getCurrentScenario().steps\n        const currentStepsLength = currentSteps.length\n        const stepData = this.getStepDataObject(test)\n\n        currentSteps[currentStepsLength - 1] = { ...this.getCurrentStep(), ...stepData }\n    }\n\n    /**\n     * Add the attachment to the result\n     */\n    public cucumberJsAttachment(attachment: CucumberJsAttachment): void {\n        // The attachment can be added to the current running scenario step\n        const currentStep = this.getCurrentStep()\n        const embeddings = {\n            data: attachment?.data,\n            mime_type: attachment.type,\n        }\n\n        // Check if there is an embedding, if not, add it, else push it\n        if (!currentStep.embeddings) {\n            currentStep.embeddings = [embeddings]\n        } else {\n            currentStep.embeddings.push(embeddings)\n        }\n    }\n}\n\nexport default CucumberJsJsonReporter\n"]}